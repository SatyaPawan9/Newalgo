import socket
import threading
import time

class Node:
    def __init__(self, node_id, ip, port, initial_value,inputs, neighbors, dt, steps):
        self.node_id = node_id
        self.ip = ip
        self.port = port
        self.value = initial_value
        self.neighbors = neighbors
        self.dt = dt
        self.steps = steps
        self.inputs=inputs
        self.received_values = {}
        self.lock = threading.Lock()

    def update_received_value(self, neighbor_id, neighbor_value):
        with self.lock:
            self.received_values[neighbor_id] = neighbor_value

    def update_value(self):
        with self.lock:
            if self.received_values:
                
                state_derivative=-len(self.received_values)*self.value+sum(self.received_values.values())+self.inputs
				self.value+=state_derivative*self.dt
				
                print(f"Node {self.node_id} updated value: {self.value}")
                self.received_values = {}

    def start_server(self):
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind((self.ip, self.port))
        server_socket.listen()
        print(f"Node {self.node_id} listening on {self.ip}:{self.port}")
        while True:
            conn, addr = server_socket.accept()
            threading.Thread(target=self.handle_client, args=(conn, addr)).start()

    def handle_client(self, conn, addr):
        while True:
            data = conn.recv(1024)
            if data:
                neighbor_id, neighbor_value = data.decode().split(',')
                self.update_received_value(neighbor_id, float(neighbor_value))
                conn.sendall(b"ACK")
            else:
                break
        conn.close()

    def run(self):
        # Start the server thread
        server_thread = threading.Thread(target=self.start_server)
        server_thread.daemon = True
        server_thread.start()

        # Wait for a longer period to ensure all servers are up
        time.sleep(10)

        for step in range(self.steps):
            print(f"Step {step + 1}/{self.steps} - Node {self.node_id} current value: {self.value}")

            # Communicate with neighbors
            for neighbor_ip, neighbor_port in self.neighbors:
                try:
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                        s.settimeout(5)
                        s.connect((neighbor_ip, neighbor_port))
                        message = f"{self.node_id},{self.value}"
                        s.sendall(message.encode())
                        data = s.recv(1024)
                        if data == b"ACK":
                            print(f"Node {self.node_id} sent value {self.value} to {neighbor_ip}:{neighbor_port}")
                        else:
                            print(f"Node {self.node_id} received unexpected response from {neighbor_ip}:{neighbor_port}")
                except socket.error as e:
                    print(f"Error communicating with {neighbor_ip}:{neighbor_port} - {e}")

            # Wait until values are received from all neighbors
            #time.sleep(self.dt / 2)
            while len(self.received_values) < len(self.neighbors):
                time.sleep(0.3)

            # Update value based on received values from neighbors
            self.update_value()

            time.sleep(0.5)

if __name__ == "__main__":
    # Example configuration
    node_id = 1
    ip = '10.194.21.174'  # Replace with actual IP address of the node
    port = 5000
    initial_value = 1.0
    dt = 0.01  # Time delay in seconds
    steps = 100 # Number of iterations
    inputs=0

    # Define the neighbors (IP, port)
    neighbors = [
        ('10.194.21.174', 5001)
    ]

    # Create and run the node
    node = Node(node_id, ip, port, initial_value,inputs, neighbors, dt, steps)
    node.run()
